<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from /home/kimsooyoung/gcamp_ros2_ws/src/ros2-navigation-examples/basic_mobile_robot/models/basic_mobile_bot_v1.urdf.xacro | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="basic_mobile_bot">
  <!-- *********************** WHEEL ODOMETRY ***************************    -->
  <gazebo>
    <plugin filename="libgazebo_ros_diff_drive.so" name="basic_mobile_bot_diff_drive">
      <update_rate>30</update_rate>
      <!-- wheels -->
      <left_joint>drivewhl_l_joint</left_joint>
      <right_joint>drivewhl_r_joint</right_joint>
      <!-- kinematics -->
      <wheel_separation>0.52</wheel_separation>
      <wheel_diameter>0.28</wheel_diameter>
      <!-- limits -->
      <max_wheel_torque>20</max_wheel_torque>
      <max_wheel_acceleration>1.0</max_wheel_acceleration>
      <!-- Receive velocity commands on this ROS topic -->
      <command_topic>cmd_vel</command_topic>
      <!-- output -->
      <!-- When false, publish no wheel odometry data to a ROS topic -->
      <publish_odom>true</publish_odom>
      <!-- When true, publish coordinate transform from odom to base_footprint -->
      <!-- I usually use the robot_localization package to publish this transform -->
      <publish_odom_tf>false</publish_odom_tf>
      <!-- When true, publish coordinate transform from base_link to the wheels -->
      <!-- The robot_state_publisher package is often used to publish this transform -->
      <publish_wheel_tf>false</publish_wheel_tf>
      <odometry_topic>odom</odometry_topic>
      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_footprint</robot_base_frame>
      <!-- Odometry source, 0 for ENCODER, 1 for WORLD, defaults to WORLD -->
      <odometry_source>0</odometry_source>
      <!-- Change the ROS topic we will publish the odometry data to -->
      <ros>
        <remapping>odom:=wheel/odometry</remapping>
      </ros>
    </plugin>
  </gazebo>
  <!-- *********************** JOINT STATE PUBLISHER *********************   -->
  <gazebo>
    <plugin filename="libgazebo_ros_joint_state_publisher.so" name="basic_mobile_bot_joint_state">
      <ros>
        <remapping>~/out:=joint_states</remapping>
      </ros>
      <update_rate>30</update_rate>
      <joint_name>drivewhl_l_joint</joint_name>
      <joint_name>drivewhl_r_joint</joint_name>
    </plugin>
  </gazebo>
  <!-- ****************** ROBOT BASE FOOTPRINT ***************************  -->
  <!-- Define the center of the main robot chassis projected on the ground -->
  <link name="base_footprint"/>
  <!-- The base footprint of the robot is located underneath the chassis -->
  <joint name="base_joint" type="fixed">
    <parent link="base_footprint"/>
    <child link="base_link"/>
    <origin rpy="0 0 0" xyz="0.0 0.0 0.19"/>
  </joint>
  <!-- ********************** ROBOT BASE *********************************  -->
  <link name="base_link">
    <visual>
      <origin rpy="1.5707963267949 0 3.141592654" xyz="0 0 -0.05"/>
      <geometry>
        <box size="0.70 0.15 0.40"/>
      </geometry>
      <material name="Red">
        <color rgba="1.0 0.0 0.0 1.0"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="0.7 0.39 0.2"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="1.5707963267948966 0 1.5707963267948966" xyz="0 0 0"/>
      <mass value="40.0"/>
      <inertia ixx="1.7666666666666664" ixy="0.0" ixz="0.0" iyy="2.140333333333333" iyz="0.0" izz="0.6403333333333334"/>
    </inertial>
  </link>
  <gazebo reference="base_link">
    <material>Gazebo/Red</material>
  </gazebo>
  <!-- *********************** DRIVE WHEELS ******************************  -->
  <link name="drivewhl_l_link">
    <visual>
      <origin rpy="1.5707963267949 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.06" radius="0.14"/>
      </geometry>
      <material name="White">
        <color rgba="1.0 1.0 1.0 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.06" radius="0.14"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <mass value="110.5"/>
      <inertia ixx="0.5746000000000001" ixy="0" ixz="0" iyy="0.5746000000000001" iyz="0" izz="1.0829000000000002"/>
    </inertial>
  </link>
  <!-- Connect the wheels to the base_link at the appropriate location, and 
         define a continuous joint to allow the wheels to freely rotate about
         an axis -->
  <joint name="drivewhl_l_joint" type="revolute">
    <parent link="base_link"/>
    <child link="drivewhl_l_link"/>
    <origin rpy="0 0 0" xyz="-0.221 0.23 -0.05"/>
    <limit effort="30" lower="-3.1415" upper="3.1415" velocity="5.0"/>
    <axis xyz="0 1 0"/>
  </joint>
  <link name="drivewhl_r_link">
    <visual>
      <origin rpy="1.5707963267949 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.06" radius="0.14"/>
      </geometry>
      <material name="White">
        <color rgba="1.0 1.0 1.0 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.06" radius="0.14"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 0"/>
      <mass value="110.5"/>
      <inertia ixx="0.5746000000000001" ixy="0" ixz="0" iyy="0.5746000000000001" iyz="0" izz="1.0829000000000002"/>
    </inertial>
  </link>
  <!-- Connect the wheels to the base_link at the appropriate location, and 
         define a continuous joint to allow the wheels to freely rotate about
         an axis -->
  <joint name="drivewhl_r_joint" type="revolute">
    <parent link="base_link"/>
    <child link="drivewhl_r_link"/>
    <origin rpy="0 0 0" xyz="-0.221 -0.23 -0.05"/>
    <limit effort="30" lower="-3.1415" upper="3.1415" velocity="5.0"/>
    <axis xyz="0 1 0"/>
  </joint>
  <!-- *********************** CASTER WHEEL ******************************  -->
  <!-- We add a caster wheel. It will be modeled as sphere.
       We define the wheelâ€™s geometry, material and the joint to connect it to 
       base_link at the appropriate location. -->
  <link name="front_caster">
    <visual>
      <geometry>
        <sphere radius="0.09"/>
      </geometry>
      <material name="White">
        <color rgba="1.0 1.0 1.0 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <sphere radius="0.09"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="10.05"/>
      <inertia ixx="0.032562" ixy="0.0" ixz="0.0" iyy="0.032562" iyz="0.0" izz="0.032562"/>
    </inertial>
  </link>
  <gazebo reference="front_caster">
    <mu1>0.01</mu1>
    <mu2>0.01</mu2>
    <material>Gazebo/White</material>
  </gazebo>
  <joint name="caster_joint" type="fixed">
    <parent link="base_link"/>
    <child link="front_caster"/>
    <origin rpy="0 0 0" xyz="0.217 0.0 -0.1"/>
  </joint>
  <!-- *********************** IMU SETUP *********************************  -->
  <!-- Each sensor must be attached to a link.                              -->
  <joint name="imu_joint" type="fixed">
    <parent link="base_link"/>
    <child link="imu_link"/>
    <origin rpy="0 0 0" xyz="-0.10 0 0.05"/>
  </joint>
  <link name="imu_link"/>
  <!-- *********************** GPS SETUP **********************************  -->
  <joint name="gps_joint" type="fixed">
    <parent link="base_link"/>
    <child link="gps_link"/>
    <origin rpy="0 0 0" xyz="0.10 0 0.05"/>
  </joint>
  <link name="gps_link"/>
</robot>
